/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  IGNORE_CASE = false;}PARSER_BEGIN(parserP1)package uniandes.teolen.parserJavaCC.parserP1;

import java.util.*;

public class parserP1{
  public ArrayList<String> nombreVariables = new ArrayList<String>();

  public ArrayList<String> nombreFunciones = new ArrayList<String>();
  }PARSER_END(parserP1)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN: /* OPERADORES ARIMETICOS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < MODULO: "%">}

TOKEN: /* OPERADORES BOOLEANOS */
{
    < IGUAL : "==">
|   < MENOR : "<">
|   < MAYOR: ">">
|   <MENORIGUAL : "<=">
|   < MAYORIGUAL: ">=">
|   < DIFERENTE : "!=">
|   <NEGACION: "not">
|   <AND : "and">
|   <OR : "or">
}

TOKEN: /* SIMBOLOS OTROS DEL LENGUAJE*/
{
  < DPARENT: "(" >
| < IPARENT: ")">
| < DOSPUNTOS: ":">
| < DCORCH: "[">
| < ICORCH: "]">
| < COMA: ",">}
TOKEN :{  < INT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < #MAY: ["A"-"Z"] >
| < #MIN: ["a"-"z"] >
| < DEFINE : "define">
| < PVAR: "var">
| < VAR : ((<MAY>)|(< MIN >))+(<INT>)*>
| <FUNCION: ((<MAY>)|(<MIN>))+>
| <PARAMETRO: ((<VAR><COMA>)*<VAR>)*>
| < ASIGNAR: "=">
| <IF: "if" >
| <PRINT: "print">}int one_line() :{}{
  variable()|funcion()
}

//definicion de las funciones y variables

void variable() throws Exception:
{}
{
	
  <PVAR><VAR><ASIGNAR>
	if(!existeVariable) { 
  	expresionAri() // Toca revisar que la variable que se declara no ha sido declarada antes	}
}

void funcion() throws Exception:
{}
{
  <DEFINE><FUNCION><DPARENT><PARAMETRO><IPARENT><DOSPUNTOS> // Toca revisar que la funcion que se declara no ha sido delcarada antes
	if (!existeFuncion) { 
  	( expresionAri()|funcionif()) 
}
}
//asignacion de las funciones y variables
void expresionAri(): //expresi贸n arimetica 
{}
{
 <INT>
 |<VAR> //Toca revisar que la variable que se asigne en la expresi贸n arimetica exsite 
 |<FUNCION>
 |expresionAri()<PLUS>expresionAri()
 |expresionAri()<MULTIPLY>expresionAri()
 |expresionAri()<DIVIDE>expresionAri()
 |expresionAri()<MINUS>expresionAri()
 |expresionAri()<MODULO>expresionAri() }
void expresionCond() : // expresi贸n condicional{}{ expresionAri()(<IGUAL>|<MENOR>|<MAYOR>|<MENORIGUAL>|<MAYORIGUAL>|<DIFERENTE>)expresionAri()
| <NEGACION>expresionCond()
| expresionCond()<AND>expresionCond()
| expresionCond()<OR>expresionCond()
}
void funcionif(): // funcion especial if
{}
{
<IF><DPARENT>expresionCond()<COMA>expresionAri()<COMA>expresionAri()<IPARENT> 
}

void print(): // funcion de terminaci贸n print
{}
{
 <PRINT><DPARENT>expresionAri()<IPARENT> }void existeVar():
{token v;}
{  ( v = <VAR>)
  Boolean x = false;
  for(int i =0; i < nombresVariables.size(); i++)
  {
	if(nombresVariables.get(i).equals( v.image;)) { 
		x = true;
	}  
    
  }

	if (x)
	{
	throw new Error("esta Variable ya existe" );
	}
}

void existeFun() throws Exception;
{token f;}
{
  ( f = <FUNCION>)
  Boolean x = false;
  for(int i =0; i < nombresFunciones.size(); i++)
  {
	if(nombresVariables.get(i).equals(f.image)) { 
		x = true;
	}  
    
  }

	if(x)
	{
		throw new Error("esta funcion ya existe" );
	}
}